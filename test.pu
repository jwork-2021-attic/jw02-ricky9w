@startuml
package example {
  class BubbleSorter {
    - a : int[]
    - plan : String
    + BubbleSorter()
    + getPlan() : String
    + load(a : int[])
    + sort()
    - swap(i : int, j : int)
  }
  class Geezer {
    - sorter : Sorter
    - theGeezer : Geezer {static}
    - Geezer()
    - execute(step : String)
    + getTheGeezer() : Geezer {static}
    + lineUp(line : Line) : String
    - parsePlan(plan : String) : String[]
    + setSorter(sorter : Sorter)
  }
  enum Gourd {
    + FIVE {static}
    + FOUR {static}
    + ONE {static}
    + SEVEN {static}
    + SIX {static}
    + THREE {static}
    + TWO {static}
    - b : int
    - g : int
    - position : Position
    - r : int
    + getGourdByRank(rank : int) : Gourd {static}
    + getPosition() : Position
    + getValue() : int
    + rank() : int
    + setPosition(position : Position)
    + swapPosition(another : Gourd)
    + toString() : String
    + valueOf(String) : Gourd {static}
    + values() : Gourd[] {static}
  }
  interface Linable {
    + getPosition() : Position {abstract}
    + getValue() : int {abstract}
    + setPosition(Position) {abstract}
  }
  class Line {
    - positions : Position[]
    + Line(length : int)
    + get(i : int) : Linable
    + put(linable : Linable, i : int)
    + toArray() : Linable[]
    + toString() : String
  }
  ~class Position {
    - linable : Linable
    ~ Position(linable : Linable)
    + setLinable(linable : Linable)
  }
  class Scene {
    + Scene()
    + main(args : String[]) {static}
  }
  interface Sorter {
    + getPlan() : String {abstract}
    + load(int[]) {abstract}
    + sort() {abstract}
  }
}
Position -->  "-linable" Linable
Geezer -->  "-theGeezer" Geezer
Gourd -->  "-position" Position
Position --+ Line
Geezer -->  "-sorter" Sorter
BubbleSorter ..|> Sorter 
Gourd ..|> Linable 
@enduml